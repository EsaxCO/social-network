{"version":3,"sources":["components/Dialogs/Members/Member/Member.jsx","components/Dialogs/Members/Members.jsx","components/Dialogs/Members/Messages/ContentMessage.jsx","components/Dialogs/SendMessage/SendMessage.jsx","components/Dialogs/Members/Messages/MessagesContainer.jsx","components/Dialogs/Dialogs.jsx"],"names":["Member","id","name","count","status","className","to","_","require","initialState","reducer","state","action","type","number","Error","Members","instance","useReducer","dispatch","useState","membersList","setMembersList","updateCount","useCallback","source","Axios","CancelToken","fetchData","a","get","cancelToken","token","dialogs","data","isEqual","isCancel","console","log","useEffect","isCancelled","setInterval","cancel","mainMembersData","map","member","hasNewMessages","newMessagesCount","key","userName","ContentMessage","total","userAvatar","avatar","restoreMessage","deleteMessage","setPageCurrent","currentPage","mainMessageData","currentId","setCurrentId","handleRestoreClick","array","message","handleDeleteClick","handlePageChange","pageCurrent","e","defaultPage","backgroundColor","color","textTransform","numbers","fontWeight","format","dateStr","date","split","time","limit","pageCount","pages","hasNextPage","hasPreviousPage","previousPage","nextPage","totalPages","getPageItemProps","pageValue","style","onPageChange","page","activePage","item","recipientId","viewed","src","blocker","alt","includes","onClick","senderName","addedAt","body","Preloader","isLoading","SendMessageFormRedux","reduxForm","form","handleSubmit","update","onSubmit","Field","component","rows","SendMessage","setUpdate","setTimeout","initialValues","formData","Messages","mounted","setMounted","messagesList","setMessagesList","isSending","setIsSending","updated","setUpdated","setCount","setPage","updatePage","setUpdatePage","isDeleting","setIsDeleting","isRestoring","setIsRestoring","response","items","totalCount","currentList","reduce","obj","Object","assign","length","undefined","post","put","delete","MessagesContainer","profile","mainDialogsData","user","path","render","photos","small","axios","withCredentials","headers","baseURL","Dialogs","setProfile","value","useSelector","authPage","members"],"mappings":"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","file":"static/js/4.7549eea5.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../css/Dialogs/Members/Member/Member.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Member = ({ id, name, count, status }) => {\r\n    return (\r\n        <li className=\"section-dialogs-inner-members-li\">\r\n            <NavLink className=\"section-dialogs-inner-members-li-url\" to={\"/home/dialogs/\" + id}>{name}\r\n                {status ? <div className=\"new-message\">Новых сообщений: {count}</div> : null}</NavLink>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Member;","import React from 'react';\r\nimport '../../css/Dialogs/Members/Members.css';\r\nimport Member from './Member/Member';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useReducer } from 'react';\r\nimport Axios from 'axios';\r\nvar _ = require(\"lodash\");\r\n\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'set':\r\n            return { count: action.number };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\n\r\nconst Members = ({ instance }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    let [membersList, setMembersList] = useState([]);\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n    let updateCount = useCallback((number) => {\r\n        dispatch({ type: 'set', number });\r\n    })\r\n/* eslint-enable react-hooks/exhaustive-deps */\r\n    let source = Axios.CancelToken.source(); // axios cancel method\r\n    const fetchData = async () => {\r\n        try {\r\n            const dialogs = await instance.get(`/dialogs`, {\r\n                cancelToken: source.token\r\n            });\r\n            const count = await instance.get(`/dialogs/messages/new/count`, {\r\n                cancelToken: source.token\r\n            });\r\n            if (count.status === 200) {\r\n                updateCount(count.data);\r\n            }\r\n            if (dialogs.status === 200) {\r\n                if (!_.isEqual(membersList, dialogs.data)) {\r\n                    setMembersList(dialogs.data);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (Axios.isCancel(error)) {\r\n                console.log('cancel request Members');\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    /* eslint-disable react-hooks/exhaustive-deps */\r\n    useEffect(() => {\r\n        let isCancelled = true;\r\n        if (isCancelled) setInterval(() => { fetchData(); }, 10000);\r\n        fetchData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        return () => {\r\n            isCancelled = false;\r\n            source.cancel();\r\n        };\r\n    }, [membersList])\r\n    /* eslint-enable react-hooks/exhaustive-deps */\r\n    let mainMembersData = membersList.map((member) => {\r\n        return <Member status={member.hasNewMessages} count={member.newMessagesCount} key={member.id} id={member.id} name={member.userName} />;\r\n    });\r\n    return (\r\n        <ul className=\"section-dialogs-inner-members\">\r\n            {mainMembersData}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Members;","import React, { Fragment } from 'react';\r\nimport { useState } from 'react';\r\nimport Pagination from 'react-paginating';\r\nimport blocker from '../../../../img/default-avatar.png'\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\n\r\nconst ContentMessage = ({ total, userAvatar, avatar, restoreMessage, deleteMessage, setPageCurrent, id, currentPage, mainMessageData }) => {\r\n    let [currentId, setCurrentId] = useState([]);\r\n    let handleRestoreClick = (id) => {\r\n        restoreMessage(id);\r\n        let array = currentId.map(message => { if (message !== id) { return message } else { return null } })\r\n        setCurrentId(array);\r\n    }\r\n    let handleDeleteClick = (id) => {\r\n        deleteMessage(id);\r\n        let array = [...currentId, id];\r\n        setCurrentId(array);\r\n    }\r\n    let handlePageChange = (pageCurrent, e) => {\r\n        setPageCurrent(pageCurrent);\r\n    }\r\n    let defaultPage = {\r\n        backgroundColor: 'rgb(7, 2, 91)',\r\n        color: '#ffffff',\r\n        textTransform: 'uppercase'\r\n    }\r\n    let numbers = {\r\n        backgroundColor: '#07025b',\r\n        fontWeight: '700',\r\n        color: '#ffffff'\r\n    }\r\n    function format(dateStr) {\r\n        let date = dateStr.split('T');\r\n        let time = date[1].split(\":\");\r\n        return (date[0] + \" \" + time[0] + \":\" + time[1]);\r\n    }\r\n    return (\r\n        <>\r\n            <Pagination key={'page' + total + currentPage} className=\"pagination-style\" total={total} limit={10} pageCount={10} currentPage={currentPage} >\r\n                {({ pages, currentPage, hasNextPage, hasPreviousPage, previousPage, nextPage, totalPages, getPageItemProps }) => (\r\n                    <div>\r\n                        <button key={'first' + total + currentPage} {...getPageItemProps({ pageValue: 1, style: defaultPage, onPageChange: handlePageChange })}>first</button>\r\n                        {hasPreviousPage && (<button key={'prev' + total + currentPage} {...getPageItemProps({ pageValue: previousPage, style: numbers, onPageChange: handlePageChange })}>{'<'}</button>)}\r\n                        {pages.map(page => {\r\n                            let activePage = null;\r\n                            if (currentPage === page) {\r\n                                activePage = { backgroundColor: '#ff4067' };\r\n                                return (<button key={'active' + page + total + currentPage} {...getPageItemProps({ pageValue: page, style: activePage, onPageChange: handlePageChange })}>{page}</button>);\r\n                            }\r\n                            return (<button key={page + total + currentPage} {...getPageItemProps({ pageValue: page, style: activePage, onPageChange: handlePageChange })}>{page}</button>);\r\n                        })}\r\n                        {hasNextPage && (<button key={'next' + total + currentPage} {...getPageItemProps({ pageValue: nextPage, style: numbers, onPageChange: handlePageChange })}>{'>'}</button>)}\r\n                        <button key={'last' + total + currentPage} {...getPageItemProps({ pageValue: totalPages, style: defaultPage, onPageChange: handlePageChange })}>last</button>\r\n                    </div>\r\n                )}\r\n            </Pagination>\r\n            <div className=\"row\">\r\n                {mainMessageData !== 0\r\n                    ? (mainMessageData.map(pages => {\r\n                        if (pages.id === currentPage) {\r\n                            return <ul key={pages.id + total + currentPage}>\r\n                                {pages.item.map((item) => {\r\n                                    return (item.recipientId === id\r\n                                        ? <Fragment key={item.id}>\r\n                                            <div className={(item.viewed ? \"section-dialogs-inner-active-message col-sm-6 col-sm-offset-6\" : \"section-dialogs-inner-active-messagenew col-sm-6 col-sm-offset-6\")}>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"content-message\">\r\n                                                        <div className=\"col-sm-4 content-message-avatar\">\r\n                                                            <img className=\"img-responsive rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                                                            {(currentId.includes(item.id))\r\n                                                                ? <button onClick={() => { handleRestoreClick(item.id) }} className=\"content-message-button-restore\">restore</button>\r\n                                                                : <button onClick={() => { handleDeleteClick(item.id) }} className=\"content-message-button-delete\">delete</button>}\r\n                                                        </div>\r\n                                                        <div className=\"col-sm-8 content-message-text\">\r\n                                                            <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                                <h5>{item.senderName}</h5>\r\n                                                                <h6>{format(item.addedAt)}</h6>\r\n                                                            </div>\r\n                                                            <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                                <div className=\"wrapword\">{item.body}</div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"col-sm-12 nopadding\">\r\n                                                {!item.viewed ? <div className=\"viewed-status\">Не просмотрено</div> : <div className=\"message-paddding-viewed\" />}\r\n                                            </div></Fragment>\r\n                                        : <Fragment key={item.id}><div className=\"section-dialogs-inner-active-message col-sm-6\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"content-message\">\r\n                                                    <div className=\"col-sm-4 content-message-avatar\">\r\n                                                        <img className=\"img-responsive rounded-circle\" src={userAvatar ? userAvatar : blocker} alt=\"\" />\r\n                                                        {(currentId.includes(item.id))\r\n                                                            ? <button onClick={() => { handleRestoreClick(item.id) }} className=\"content-message-button-restore\">restore</button>\r\n                                                            : <button onClick={() => { handleDeleteClick(item.id) }} className=\"content-message-button-delete\">delete</button>}\r\n                                                    </div>\r\n                                                    <div className=\"col-sm-8 col-centered content-message-text\">\r\n                                                        <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                            <h5>{item.senderName}</h5>\r\n                                                            <h6>{format(item.addedAt)}</h6>\r\n                                                        </div>\r\n                                                        <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                            <p className=\"wrapword\">{item.body}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                            <div className=\"col-sm-12 nopadding\">\r\n                                                <div className=\"message-paddding-viewed\" />\r\n                                            </div>\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </ul>\r\n                        } else { return null }\r\n                    }))\r\n                    : <Preloader isLoading={true} />\r\n                }\r\n            </div>\r\n        </>);\r\n}\r\n\r\nexport default ContentMessage;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport '../../css/Dialogs/SendMessage/SendMessage.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { useState } from 'react';\r\nimport Preloader from '../../commons/Preloader/Preloader';\r\n\r\n\r\nconst SendMessageForm = ({ handleSubmit, update }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"section-dialogs-inner-newmessage\">\r\n                <Field name=\"message\" component=\"textarea\" className=\"section-dialogs-inner-newmessage-input\" id=\"\" rows=\"2\"></Field>\r\n                <button className=\"section-dialogs-inner-newmessage-button\">Send Message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst SendMessageFormRedux = reduxForm({ form: \"SendMessageFormn\" })(SendMessageForm);\r\n\r\n\r\nconst SendMessage = ({ onSubmit }) => {\r\n    let messageValue = { message: \"\" }\r\n    let [update, setUpdate] = useState(false);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setUpdate(false);\r\n        }, 500);\r\n        return () => {\r\n        };\r\n    }, [update]);\r\n    let handleSubmitClick = (formData) => {\r\n        onSubmit(formData);\r\n        setUpdate(true);\r\n    }\r\n    return (\r\n        (!update ? <SendMessageFormRedux update={update} initialValues={messageValue} onSubmit={handleSubmitClick} /> : <div className=\"section-users-elements-status\"><Preloader isLoading={true} /></div>)\r\n    );\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport '../../../css/Dialogs/Members/Messages/Message.css';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport ContentMessage from './ContentMessage'\r\nimport { Route } from 'react-router-dom';\r\nimport SendMessage from '../../SendMessage/SendMessage';\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\nimport { useCallback } from 'react';\r\nimport Axios from 'axios';\r\nvar _ = require(\"lodash\");\r\n\r\n\r\nconst Messages = ({ id, avatar, instance, userAvatar }) => {\r\n    let [mounted, setMounted] = useState(false); // first render control\r\n    let [messagesList, setMessagesList] = useState([]); // messagesArray\r\n    let [isSending, setIsSending] = useState(false); // control requests status\r\n    let [updated, setUpdated] = useState(false); // control 2nd page rendering\r\n    let [count, setCount] = useState(0); // total messages count\r\n    let [page, setPage] = useState(1); // control pages\r\n    let [updatePage, setUpdatePage] = useState(false); // refreshing variable \r\n    let [isDeleting, setIsDeleting] = useState(false); // control message deleting\r\n    let [isRestoring, setIsRestoring] = useState(false); // control message restoring\r\n    let source = Axios.CancelToken.source(); // source for cancel axios\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await instance.get(`/dialogs/${id}/messages?page=${page}&count=10`, {\r\n                cancelToken: source.token\r\n            });\r\n            if (response.status === 200) {\r\n                if (mounted === false) {\r\n                    let array = [{ id: 1, item: response.data.items }]; // first render with no props\r\n                    setMessagesList(array); // add first page\r\n                    setCount(response.data.totalCount);\r\n                    setMounted(true);\r\n                } else {\r\n                    setCount(response.data.totalCount);\r\n                    var currentList = messagesList.reduce(\r\n                        (obj, item) => Object.assign(obj, { [item.id]: item.item }), {}); // create object {page: messages}\r\n                    if (page > 1) {\r\n                        if (messagesList.length > 1 && updated === true) {\r\n                            if (!_.isEqual(response.data.items, currentList[page])) { // another pages\r\n                                let array = [...messagesList, messagesList[page - 1] = [page, response.data.items]];\r\n                                setMessagesList(array);\r\n                            }\r\n                        } else { // second page need to push without check isEqual\r\n                            let array = [...messagesList, { id: page, item: response.data.items }];\r\n                            setMessagesList(array)\r\n                            setUpdated(true);\r\n                        }\r\n                    } else if (!_.isEqual(response.data.items, currentList[page])) { // first page update\r\n                        let array = [{ id: 1, item: response.data.items }]\r\n                        setMessagesList(array);\r\n                        // setUpdated(false); ???\r\n                        console.log(\"STATE UPDATE\");\r\n                    } else {\r\n                        console.log(\"SAME PAGE\");\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (Axios.isCancel(error)) {\r\n                console.log('cancel request Messages');\r\n            } else if (error === undefined) {\r\n                console.log('some response error');\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    /* eslint-disable react-hooks/exhaustive-deps */\r\n    const onSubmit = useCallback(async ({ message }) => {\r\n        if (isSending) return\r\n        setIsSending(true)\r\n        await instance.post(`/dialogs/${id}/messages`, {\r\n            body: message,\r\n            cancelToken: source.token\r\n        });\r\n        setUpdatePage(!updatePage);\r\n        setIsSending(false);\r\n    }, [isSending]);\r\n    const restoreMessage = useCallback(async (id) => {\r\n        if (isRestoring) return\r\n        setIsRestoring(true)\r\n        await instance.put(`/dialogs/messages/${id}/restore`);\r\n        setIsRestoring(false);\r\n    }, [isRestoring]);\r\n    const deleteMessage = useCallback(async (id) => {\r\n        if (isDeleting) return\r\n        setIsDeleting(true)\r\n        await instance.delete(`/dialogs/messages/${id}`);\r\n        setIsDeleting(false);\r\n    }, [isDeleting]);\r\n    /* eslint-enable react-hooks/exhaustive-deps */\r\n    const setPageCurrent = (page) => {\r\n        setPage(page);\r\n    }\r\n    /* eslint-disable react-hooks/exhaustive-deps */\r\n    useEffect(() => {\r\n        let isCancelled = true;\r\n        if (isCancelled) setInterval(() => { fetchData(); }, 10000);\r\n        fetchData(); // NEED CANCEL TOKEN FOR AXIOS\r\n        return () => {\r\n            isCancelled = false;\r\n            source.cancel();\r\n        };\r\n    }, [updatePage, page, messagesList]);\r\n    /* eslint-enable react-hooks/exhaustive-deps */\r\n    if (mounted === false) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    return (\r\n        <div key={\"section-dialogs-inner-active\"} className=\"section-dialogs-inner-active\">\r\n            <ContentMessage userAvatar={userAvatar} avatar={avatar} id={id} restoreMessage={restoreMessage} setPageCurrent={setPageCurrent} currentPage={page} deleteMessage={deleteMessage} mainMessageData={messagesList} total={count} />\r\n            <SendMessage onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst MessagesContainer = ({ membersList, instance, profile }) => {\r\n    if (membersList === null || profile === null) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    let mainDialogsData = membersList.map((user) => (<Route key={user.id} path={`/home/dialogs/${user.id}`} render={() => <Messages instance={instance} key={user.id} userAvatar={user.photos.small} avatar={profile.photos.small} id={user.id} />} />));\r\n    return (\r\n        <>\r\n            {mainDialogsData}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MessagesContainer;","import React from 'react';\r\nimport '../css/Dialogs//Dialogs.css';\r\nimport Members from './Members/Members';\r\nimport MessagesContainer from './Members/Messages/MessagesContainer';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Axios, * as axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"9832db98-b9d3-460c-9cab-5d06ff193b07\" },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\"\r\n});\r\n\r\nconst Dialogs = () => {\r\n    let [membersList, setMembersList] = useState([]);\r\n    let [profile, setProfile] = useState(null);\r\n    const value = useSelector(state => state.authPage.id);\r\n    /* eslint-disable react-hooks/exhaustive-deps */\r\n    useEffect(() => {\r\n        let source = Axios.CancelToken.source(); // axios cancel control\r\n        const fetchData = async () => {\r\n            try {\r\n                const dialogs = await instance.get(`/dialogs`, {\r\n                    cancelToken: source.token\r\n                });\r\n                const profile = await instance.get(`/profile/${value}`, {\r\n                    cancelToken: source.token\r\n                });\r\n                if (dialogs.status === 200) {\r\n                    setMembersList(dialogs.data);\r\n                }\r\n                if (profile.status === 200) {\r\n                    setProfile(profile.data);\r\n                }\r\n            } catch (error) {\r\n                if (Axios.isCancel(error)) {\r\n                    console.log('cancel request Dialogs');\r\n                } else {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n            source.cancel();\r\n        };\r\n    }, [])\r\n    /* eslint-enable react-hooks/exhaustive-deps */\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"section-dialogs\">\r\n                <div className=\"section-dialogs-inner\">\r\n                    <div className=\"col-sm-4\">\r\n                        <Members members={membersList} instance={instance} />\r\n                    </div>\r\n                    <MessagesContainer profile={profile} instance={instance} membersList={membersList} />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Dialogs;"],"sourceRoot":""}