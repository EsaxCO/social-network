{"version":3,"sources":["components/Dialogs/Members/Member/Member.jsx","components/Dialogs/Members/Members.jsx","components/Dialogs/SendMessage/SendMessage.jsx","components/Dialogs/Members/Messages/Message.jsx","components/Dialogs/Dialogs.jsx"],"names":["Member","id","name","count","status","className","to","initialState","reducer","state","action","type","number","Error","Members","instance","useReducer","dispatch","useState","membersList","setMembersList","updated","setUpdated","updateCount","useCallback","myTimeout","setTimeout","useEffect","fetchData","a","get","response","data","fetchNewData","clearTimeout","mainMembersData","map","member","hasNewMessages","newMessagesCount","key","userName","SendMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","rows","SendMessage","_","require","PaginationSelector","total","userAvatar","avatar","restoreMessage","deleteMessage","setPageCurrent","currentPage","mainMessageData","currentId","setCurrentId","handleRestoreClick","array","messages","handleDeleteClick","handlePageChange","pageCurrent","e","defaultPage","backgroundColor","color","textTransform","numbers","fontWeight","format","dateStr","date","split","time","limit","pageCount","pages","hasNextPage","hasPreviousPage","previousPage","nextPage","totalPages","getPageItemProps","pageValue","style","onPageChange","page","activePage","item","recipientId","src","blocker","alt","includes","onClick","senderName","addedAt","body","viewed","Preloader","isLoading","Message","mounted","setMounted","messagesList","setMessagesList","isSending","setIsSending","setCount","setPage","updatePage","setUpdatePage","isDeleting","setIsDeleting","isRestoring","setIsRestoring","items","totalCount","currentList","reduce","obj","Object","assign","length","isEqual","console","log","message","post","put","delete","Messages","profile","mainDialogsData","user","path","render","photos","small","axios","withCredentials","headers","baseURL","Dialogs","setProfile","value","useSelector","authPage"],"mappings":"0SAaeA,EATA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC/B,OACI,wBAAIC,UAAU,oCACV,kBAAC,IAAD,CAASA,UAAU,uCAAuCC,GAAI,iBAAmBL,GAAKC,EACjFE,EAAS,yBAAKC,UAAU,eAAf,0FAA+CF,GAAe,QCClFI,EAAe,CAAEJ,MAAO,GAE9B,SAASK,EAAQC,EAAOC,GACpB,OAAQA,EAAOC,MACX,IAAK,MACD,MAAO,CAAER,MAAOO,EAAOE,QAC3B,QACI,MAAM,IAAIC,OAKtB,IAyCeC,EAzCC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,qBAAWR,EAASD,GADhB,mBAChBU,GADgB,aAEMC,mBAAS,IAFf,mBAEzBC,EAFyB,KAEZC,EAFY,OAGFF,oBAAS,GAHP,mBAGzBG,EAHyB,KAGhBC,EAHgB,KAI1BC,EAAcC,uBAAY,SAACZ,GAC3BK,EAAS,CAAEN,KAAM,MAAOC,cAExBa,EAAYC,YAAW,WACvBJ,GAAYD,KACb,MACHM,qBAAU,WACN,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACSd,EAASe,IAAT,YADT,OAEU,OADlBC,EADQ,QAED3B,QACLe,IAAgBY,EAASC,MACzBZ,EAAeW,EAASC,MAJlB,2CAAH,qDAgBf,OARkB,uCAAG,4BAAAH,EAAA,sEACMd,EAASe,IAAT,+BADN,OAEO,OADlBC,EADW,QAEJ3B,QACTmB,EAAYQ,EAASC,MAHR,2CAAH,oDAMlBC,GACAL,IACO,WACHM,aAAaT,MAElB,CAACJ,IACJ,IAAIc,EAAkBhB,EAAYiB,KAAI,SAACC,GACnC,OAAO,kBAAC,EAAD,CAAQjC,OAAQiC,EAAOC,eAAgBnC,MAAOkC,EAAOE,iBAAkBC,IAAKH,EAAOpC,GAAIA,GAAIoC,EAAOpC,GAAIC,KAAMmC,EAAOI,cAE9H,OACI,wBAAIpC,UAAU,iCACT8B,I,6EC1CPO,EAAuBC,YAAU,CAAEC,KAAM,oBAAlBD,EAXL,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACvB,OACI,0BAAMC,SAAUD,EAAc3C,KAAK,eAC/B,yBAAKG,UAAU,oCACX,kBAAC0C,EAAA,EAAD,CAAO7C,KAAK,UAAU8C,UAAU,WAAW3C,UAAU,yCAAyCJ,GAAG,GAAGgD,KAAK,MACzG,4BAAQ5C,UAAU,2CAAlB,qBAeD6C,EANK,SAAC,GAAkB,IAAhBJ,EAAe,EAAfA,SACnB,OACI,kBAACJ,EAAD,CAAsBI,SAAUA,K,iBCVpCK,EAAIC,EAAQ,KAEVC,EAAqB,SAAC,GAAoH,IAAlHC,EAAiH,EAAjHA,MAAOC,EAA0G,EAA1GA,WAAYC,EAA8F,EAA9FA,OAAQC,EAAsF,EAAtFA,eAAgBC,EAAsE,EAAtEA,cAAeC,EAAuD,EAAvDA,eAAgB1D,EAAuC,EAAvCA,GAAI2D,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBAAsB,EAC3G3C,mBAAS,IADkG,mBACtI4C,EADsI,KAC3HC,EAD2H,KAEvIC,EAAqB,SAAC/D,GACtBwD,EAAexD,GACf,IAAIgE,EAAQH,EAAU1B,KAAI,SAAA8B,GAAc,GAAIA,IAAajE,EAAI,OAAOiE,KAEpEH,EAAaE,IAEbE,EAAoB,SAAClE,GACrByD,EAAczD,GACd,IAAIgE,EAAK,sBAAOH,GAAP,CAAkB7D,IAC3B8D,EAAaE,IAEbG,EAAmB,SAACC,EAAaC,GACjCX,EAAeU,IAEfE,EAAc,CACdC,gBAAiB,gBACjBC,MAAO,UACPC,cAAe,aAEfC,EAAU,CACVH,gBAAiB,UACjBI,WAAY,MACZH,MAAO,WAEX,SAASI,EAAOC,GACZ,IAAIC,EAAOD,EAAQE,MAAM,KACrBC,EAAOF,EAAK,GAAGC,MAAM,KACzB,OAAQD,EAAK,GAAK,IAAME,EAAK,GAAK,IAAMA,EAAK,GAEjD,OACI,oCACI,kBAAC,IAAD,CACI5E,UAAU,mBACViD,MAAOA,EACP4B,MAAO,GACPC,UAAW,GACXvB,YAAaA,IAEZ,gBACGwB,EADH,EACGA,MACAxB,EAFH,EAEGA,YACAyB,EAHH,EAGGA,YACAC,EAJH,EAIGA,gBACAC,EALH,EAKGA,aACAC,EANH,EAMGA,SACAC,EAPH,EAOGA,WACAC,EARH,EAQGA,iBARH,OAUO,6BACI,2BACQA,EAAiB,CACjBC,UAAW,EACXC,MAAOrB,EACPsB,aAAczB,IAJtB,SASCkB,GACG,2BACQI,EAAiB,CACjBC,UAAWJ,EACXK,MAAOjB,EACPkB,aAAczB,IAGjB,KAIRgB,EAAMhD,KAAI,SAAA0D,GACP,IAAIC,EAAa,KAIjB,OAHInC,IAAgBkC,IAChBC,EAAa,CAAEvB,gBAAiB,YAGhC,2BACQkB,EAAiB,CACjBC,UAAWG,EACXtD,IAAKsD,EACLF,MAAOG,EACPF,aAAczB,IAGjB0B,MAKZT,GACG,2BACQK,EAAiB,CACjBC,UAAWH,EACXI,MAAOjB,EACPkB,aAAczB,IAGjB,KAGT,2BACQsB,EAAiB,CACjBC,UAAWF,EACXG,MAAOrB,EACPsB,aAAczB,IAJtB,YAYhB,yBAAK/D,UAAU,OAEa,IAApBwD,EAEQA,EAAgBzB,KAAI,SAAAgD,GAChB,GAAIA,EAAMnF,KAAO2D,EACb,OAAO,4BACFwB,EAAMY,KAAK5D,KAAI,SAAC4D,GACb,OAAQA,EAAKC,cAAgBhG,EACvB,wCAAG,yBAAKuC,IAAKwD,EAAK/F,GAAII,UAAU,iEAC9B,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,gCAAgC6F,IAAK1C,GAAkB2C,IAASC,IAAI,KACjFtC,EAAUuC,SAASL,EAAK/F,IACpB,4BAAQqG,QAAS,WAAQtC,EAAmBgC,EAAK/F,KAAOI,UAAU,kCAAlE,WACA,4BAAQiG,QAAS,WAAQnC,EAAkB6B,EAAK/F,KAAOI,UAAU,iCAAjE,WAEV,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,0DACX,4BAAK2F,EAAKO,YACV,4BAAK1B,EAAOmB,EAAKQ,WAErB,yBAAKnG,UAAU,0DACX,yBAAKA,UAAU,YAAY2F,EAAKS,WAMhD,yBAAKpG,UAAU,uBACT2F,EAAKU,OAA+D,yBAAKrG,UAAU,4BAArE,yBAAKA,UAAU,iBAAf,qFAEtB,oCAAE,yBAAKmC,IAAKwD,EAAK/F,GAAII,UAAU,iDAC7B,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,gCAAgC6F,IAAK3C,GAA0B4C,IAASC,IAAI,KACzFtC,EAAUuC,SAASL,EAAK/F,IACpB,4BAAQqG,QAAS,WAAQtC,EAAmBgC,EAAK/F,KAAOI,UAAU,kCAAlE,WACA,4BAAQiG,QAAS,WAAQnC,EAAkB6B,EAAK/F,KAAOI,UAAU,iCAAjE,WAEV,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,0DACX,4BAAK2F,EAAKO,YACV,4BAAK1B,EAAOmB,EAAKQ,WAErB,yBAAKnG,UAAU,0DACX,uBAAGA,UAAU,YAAY2F,EAAKS,WAM9C,yBAAKpG,UAAU,uBACX,yBAAKA,UAAU,qCAQ3C,kBAACsG,EAAA,EAAD,CAAWC,WAAW,OAK5CC,EAAU,SAAC,GAA0C,IAAxC5G,EAAuC,EAAvCA,GAAIuD,EAAmC,EAAnCA,OAAQzC,EAA2B,EAA3BA,SAAUwC,EAAiB,EAAjBA,WAAiB,EAC1BrC,oBAAS,GADiB,mBACjD4F,EADiD,KACxCC,EADwC,OAEhB7F,mBAAS,IAFO,mBAEjD8F,EAFiD,KAEnCC,EAFmC,OAGtB/F,oBAAS,GAHa,mBAGjDgG,EAHiD,KAGtCC,EAHsC,OAI1BjG,oBAAS,GAJiB,mBAIjDG,EAJiD,KAIxCC,EAJwC,OAK9BJ,mBAAS,GALqB,mBAKjDf,EALiD,KAK1CiH,EAL0C,OAMhClG,mBAAS,GANuB,mBAMjD4E,EANiD,KAM3CuB,EAN2C,OAOpBnG,oBAAS,GAPW,mBAOjDoG,EAPiD,KAOrCC,EAPqC,OAQpBrG,oBAAS,GARW,mBAQjDsG,EARiD,KAQrCC,EARqC,OASlBvG,oBAAS,GATS,mBASjDwG,EATiD,KASpCC,EAToC,KAUhD/F,EAAS,uCAAG,sCAAAC,EAAA,sEACSd,EAASe,IAAT,mBAAyB7B,EAAzB,0BAA6C6F,EAA7C,cADT,OAEU,OADlB/D,EADQ,QAED3B,UACO,IAAZ0G,GACI7C,EAAQ,CAAC,CAAEhE,GAAI,EAAG+F,KAAMjE,EAASC,KAAK4F,QAC1CX,EAAgBhD,GAChBmD,EAASrF,EAASC,KAAK6F,YACvBd,GAAW,KAEXK,EAASrF,EAASC,KAAK6F,YACnBC,EAAcd,EAAae,QAC3B,SAACC,EAAKhC,GAAN,OAAeiC,OAAOC,OAAOF,EAAdC,OAAA,IAAAA,CAAA,GAAsBjC,EAAK/F,GAAK+F,EAAKA,SAAS,IAC7DF,EAAO,EACHkB,EAAamB,OAAS,IAAiB,IAAZ9G,EACtB8B,EAAEiF,QAAQrG,EAASC,KAAK4F,MAAOE,EAAYhC,MACxC7B,EADgD,sBACpC+C,GADoC,CACtBA,EAAalB,EAAO,GAAK,CAACA,EAAM/D,EAASC,KAAK4F,SAC5EX,EAAgBhD,KAGhBA,EADD,sBACa+C,GADb,CAC2B,CAAE/G,GAAI6F,EAAME,KAAMjE,EAASC,KAAK4F,SAC9DX,EAAgBhD,GAChB3C,GAAW,IAEP6B,EAAEiF,QAAQrG,EAASC,KAAK4F,MAAOE,KACnC7D,EAAQ,CAAC,CAAEhE,GAAI,EAAG+F,KAAMjE,EAASC,KAAK4F,QAC1CX,EAAgBhD,GAChB3C,GAAW,GACX+G,QAAQC,IAAI,mBA3BV,2CAAH,qDAgCTxF,EAAWtB,sBAAW,uCAAC,6BAAAK,EAAA,yDAAS0G,EAAT,EAASA,SAC9BrB,EADqB,wDAEzBC,GAAa,GAFY,SAGnBpG,EAASyH,KAAT,mBAA0BvI,EAA1B,aAAyC,CAAEwG,KAAM8B,IAH9B,OAIzBlB,EAAQvB,GACRlE,IACAuF,GAAa,GANY,2CAAD,sDAOzB,CAACD,IAEEzD,GAAiBjC,sBAAW,uCAAC,WAAOvB,GAAP,SAAA4B,EAAA,0DAC3B6F,EAD2B,wDAE/BC,GAAe,GAFgB,SAGzB5G,EAAS0H,IAAT,4BAAkCxI,EAAlC,aAHyB,OAI/B0H,GAAe,GAJgB,2CAAD,sDAK/B,CAACD,IAEEhE,GAAgBlC,sBAAW,uCAAC,WAAOvB,GAAP,SAAA4B,EAAA,0DAC1B2F,EAD0B,wDAE9BC,GAAc,GAFgB,SAGxB1G,EAAS2H,OAAT,4BAAqCzI,IAHb,OAI9BwH,GAAc,GAJgB,2CAAD,sDAK9B,CAACD,IAEJ9F,YAAW,WAAQ6F,GAAeD,KAAe,KACjD3F,qBAAU,WAKN,OAJgB,IAAZmF,IACAC,GAAW,GACXnF,KAEG,eAER,IAWH,OALAD,qBAAU,WAEN,OADAC,IACO,eAER,CAAC0F,EAAYxB,KACA,IAAZgB,EACO,yBAAKzG,UAAU,kBAAiB,kBAACsG,EAAA,EAAD,CAAWC,WAAW,KAG7D,yBAAKvG,UAAU,gCACX,kBAAC,EAAD,CAAoBkD,WAAYA,EAAYC,OAAQA,EAAQvD,GAAIA,EAAIwD,eAAgBA,GAAgBE,eAfrF,SAACmC,GACpBuB,EAAQvB,GACRxE,GAAW,GACXM,KAYwIgC,YAAakC,EAAMpC,cAAeA,GAAeG,gBAAiBmD,EAAc1D,MAAOnD,IAC3N,kBAAC,EAAD,CAAa2C,SAAUA,MAoBpB6F,EAdE,SAAC,GAAwC,IAAtCxH,EAAqC,EAArCA,YAAaJ,EAAwB,EAAxBA,SAAU6H,EAAc,EAAdA,QACvC,GAAoB,OAAhBzH,GAAoC,OAAZyH,EACxB,OAAO,yBAAKvI,UAAU,kBAAiB,kBAACsG,EAAA,EAAD,CAAWC,WAAW,KAEjE,IAAIiC,EAAkB1H,EAAYiB,KAAI,SAAC0G,GAAD,OAAW,kBAAC,IAAD,CAAOtG,IAAKsG,EAAK7I,GAAI8I,KAAI,wBAAmBD,EAAK7I,IAAM+I,OAAQ,wBAAM,kBAAC,GAAD,GAASxF,OAAQsF,EAAKG,OAAOC,MAAOnI,SAAUA,EAAUyB,IAAKsG,EAAK7I,GAAIsD,WAAYuF,EAAKG,OAAOC,OAA9F,uBAA6GN,EAAQK,OAAOC,OAA5H,mBAAuIJ,EAAK7I,IAA5I,UACtH,OACI,oCACI,yBAAKI,UAAU,gCACVwI,K,gBChSX9H,EAAWoI,SAAa,CAC1BC,iBAAiB,EACjBC,QAAS,CAAE,UAAW,wCACtBC,QAAS,kDA4CEC,UAzCC,WAAO,IAAD,EACkBrI,mBAAS,IAD3B,mBACbC,EADa,KACAC,EADA,OAEUF,mBAAS,MAFnB,mBAEb0H,EAFa,KAEJY,EAFI,KAGZC,EAAQC,aAAY,SAAAjJ,GAAK,OAAIA,EAAMkJ,SAAS1J,MAwBlD,OAvBA0B,qBAAU,WAQN,OAPe,uCAAG,4BAAAE,EAAA,sEACSd,EAASe,IAAT,mBAAyB2H,IADlC,OAEU,OADlB1H,EADQ,QAED3B,QACToJ,EAAWzH,EAASC,MAHV,2CAAH,oDAMfJ,GACO,eAER,IACHD,qBAAU,WAQN,OAPe,uCAAG,4BAAAE,EAAA,sEACSd,EAASe,IAAT,YADT,OAEU,OADlBC,EADQ,QAED3B,QACTgB,EAAeW,EAASC,MAHd,2CAAH,oDAMfJ,GACO,WACHR,EAAe,OAEpB,IAEC,kBAAC,IAAD,KACI,yBAAKf,UAAU,mBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAASU,SAAUA,KAEvB,kBAAC,EAAD,CAAS6H,QAASA,EAAS7H,SAAUA,EAAUI,YAAaA","file":"static/js/4.a20a76f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../css/Dialogs/Members/Member/Member.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Member = ({ id, name, count, status }) => {\r\n    return (\r\n        <li className=\"section-dialogs-inner-members-li\">\r\n            <NavLink className=\"section-dialogs-inner-members-li-url\" to={\"/home/dialogs/\" + id}>{name}\r\n                {status ? <div className=\"new-message\">Новых сообщений: {count}</div> : null}</NavLink>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Member;","import React from 'react';\r\nimport '../../css/Dialogs/Members/Members.css';\r\nimport Member from './Member/Member';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useReducer } from 'react';\r\n\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'set':\r\n            return { count: action.number };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\n\r\nconst Members = ({ instance }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    let [membersList, setMembersList] = useState([]);\r\n    let [updated, setUpdated] = useState(false);\r\n    let updateCount = useCallback((number) => {\r\n        dispatch({ type: 'set', number });\r\n    })\r\n    let myTimeout = setTimeout(function () {\r\n        setUpdated(!updated);\r\n    }, 35000);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/dialogs`);\r\n            if (response.status === 200) {\r\n                if (membersList !== response.data) {\r\n                    setMembersList(response.data);\r\n                }\r\n            }\r\n        }\r\n        const fetchNewData = async () => {\r\n            const response = await instance.get(`/dialogs/messages/new/count`);\r\n            if (response.status === 200) {\r\n                updateCount(response.data);\r\n            }\r\n        }\r\n        fetchNewData();\r\n        fetchData();\r\n        return () => {\r\n            clearTimeout(myTimeout);\r\n        };\r\n    }, [updated])\r\n    let mainMembersData = membersList.map((member) => {\r\n        return <Member status={member.hasNewMessages} count={member.newMessagesCount} key={member.id} id={member.id} name={member.userName} />;\r\n    });\r\n    return (\r\n        <ul className=\"section-dialogs-inner-members\">\r\n            {mainMembersData}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Members;","import React from 'react';\r\nimport '../../css/Dialogs/SendMessage/SendMessage.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst SendMessageForm = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} name=\"SendMessage\">\r\n            <div className=\"section-dialogs-inner-newmessage\">\r\n                <Field name=\"message\" component=\"textarea\" className=\"section-dialogs-inner-newmessage-input\" id=\"\" rows=\"2\"></Field>\r\n                <button className=\"section-dialogs-inner-newmessage-button\">Send Message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst SendMessageFormRedux = reduxForm({ form: \"SendMessageFormn\" })(SendMessageForm);\r\n\r\n\r\nconst SendMessage = ({ onSubmit }) => {\r\n    return (\r\n        <SendMessageFormRedux onSubmit={onSubmit} />\r\n    );\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport '../../../css/Dialogs/Members/Messages/Message.css';\r\nimport blocker from '../../../../img/default-avatar.png'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport SendMessage from '../../SendMessage/SendMessage';\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\nimport { useCallback } from 'react';\r\nimport Pagination from 'react-paginating';\r\nvar _ = require(\"lodash\");\r\n\r\nconst PaginationSelector = ({ total, userAvatar, avatar, restoreMessage, deleteMessage, setPageCurrent, id, currentPage, mainMessageData }) => {\r\n    let [currentId, setCurrentId] = useState([]);\r\n    let handleRestoreClick = (id) => {\r\n        restoreMessage(id);\r\n        let array = currentId.map(messages => { if (messages !== id) return messages })\r\n        debugger;\r\n        setCurrentId(array);\r\n    }\r\n    let handleDeleteClick = (id) => {\r\n        deleteMessage(id);\r\n        let array = [...currentId, id];\r\n        setCurrentId(array);\r\n    }\r\n    let handlePageChange = (pageCurrent, e) => {\r\n        setPageCurrent(pageCurrent);\r\n    }\r\n    let defaultPage = {\r\n        backgroundColor: 'rgb(7, 2, 91)',\r\n        color: '#ffffff',\r\n        textTransform: 'uppercase'\r\n    }\r\n    let numbers = {\r\n        backgroundColor: '#07025b',\r\n        fontWeight: '700',\r\n        color: '#ffffff'\r\n    }\r\n    function format(dateStr) {\r\n        let date = dateStr.split('T');\r\n        let time = date[1].split(\":\");\r\n        return (date[0] + \" \" + time[0] + \":\" + time[1]);\r\n    }\r\n    return (\r\n        <>\r\n            <Pagination\r\n                className=\"pagination-style\"\r\n                total={total}\r\n                limit={10}\r\n                pageCount={10}\r\n                currentPage={currentPage}\r\n            >\r\n                {({\r\n                    pages,\r\n                    currentPage,\r\n                    hasNextPage,\r\n                    hasPreviousPage,\r\n                    previousPage,\r\n                    nextPage,\r\n                    totalPages,\r\n                    getPageItemProps\r\n                }) => (\r\n                        <div>\r\n                            <button\r\n                                {...getPageItemProps({\r\n                                    pageValue: 1,\r\n                                    style: defaultPage,\r\n                                    onPageChange: handlePageChange\r\n                                })}\r\n                            >\r\n                                first\r\n              </button>\r\n                            {hasPreviousPage && (\r\n                                <button\r\n                                    {...getPageItemProps({\r\n                                        pageValue: previousPage,\r\n                                        style: numbers,\r\n                                        onPageChange: handlePageChange\r\n                                    })}\r\n                                >\r\n                                    {'<'}\r\n                                </button>\r\n                            )}\r\n\r\n                            {pages.map(page => {\r\n                                let activePage = null;\r\n                                if (currentPage === page) {\r\n                                    activePage = { backgroundColor: '#ff4067' };\r\n                                }\r\n                                return (\r\n                                    <button\r\n                                        {...getPageItemProps({\r\n                                            pageValue: page,\r\n                                            key: page,\r\n                                            style: activePage,\r\n                                            onPageChange: handlePageChange\r\n                                        })}\r\n                                    >\r\n                                        {page}\r\n                                    </button>\r\n                                );\r\n                            })}\r\n\r\n                            {hasNextPage && (\r\n                                <button\r\n                                    {...getPageItemProps({\r\n                                        pageValue: nextPage,\r\n                                        style: numbers,\r\n                                        onPageChange: handlePageChange\r\n                                    })}\r\n                                >\r\n                                    {'>'}\r\n                                </button>\r\n                            )}\r\n                            <button\r\n                                {...getPageItemProps({\r\n                                    pageValue: totalPages,\r\n                                    style: defaultPage,\r\n                                    onPageChange: handlePageChange\r\n                                })}\r\n                            >\r\n                                last\r\n             </button>\r\n                        </div>\r\n                    )}\r\n            </Pagination>\r\n            <div className=\"row\">\r\n                {\r\n                    mainMessageData !== 0 ?\r\n                        (\r\n                            mainMessageData.map(pages => {\r\n                                if (pages.id === currentPage) {\r\n                                    return <ul>\r\n                                        {pages.item.map((item) => {\r\n                                            return (item.recipientId === id\r\n                                                ? <> <div key={item.id} className=\"section-dialogs-inner-active-message col-sm-6 col-sm-offset-6\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"content-message\">\r\n                                                            <div className=\"col-sm-4 content-message-avatar\">\r\n                                                                <img className=\"img-responsive rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                                                                {(currentId.includes(item.id))\r\n                                                                    ? <button onClick={() => { handleRestoreClick(item.id) }} className=\"content-message-button-restore\">restore</button>\r\n                                                                    : <button onClick={() => { handleDeleteClick(item.id) }} className=\"content-message-button-delete\">delete</button>}\r\n                                                            </div>\r\n                                                            <div className=\"col-sm-8 content-message-text\">\r\n                                                                <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                                    <h5>{item.senderName}</h5>\r\n                                                                    <h6>{format(item.addedAt)}</h6>\r\n                                                                </div>\r\n                                                                <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                                    <div className=\"wrapword\">{item.body}</div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                    <div className=\"col-sm-12 nopadding\">\r\n                                                        {!item.viewed ? <div className=\"viewed-status\">Не просмотрено</div> : <div className=\"message-paddding-viewed\" />}\r\n                                                    </div></>\r\n                                                : <><div key={item.id} className=\"section-dialogs-inner-active-message col-sm-6\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"content-message\">\r\n                                                            <div className=\"col-sm-4 content-message-avatar\">\r\n                                                                <img className=\"img-responsive rounded-circle\" src={userAvatar ? userAvatar : blocker} alt=\"\" />\r\n                                                                {(currentId.includes(item.id))\r\n                                                                    ? <button onClick={() => { handleRestoreClick(item.id) }} className=\"content-message-button-restore\">restore</button>\r\n                                                                    : <button onClick={() => { handleDeleteClick(item.id) }} className=\"content-message-button-delete\">delete</button>}\r\n                                                            </div>\r\n                                                            <div className=\"col-sm-8 col-centered content-message-text\">\r\n                                                                <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                                    <h5>{item.senderName}</h5>\r\n                                                                    <h6>{format(item.addedAt)}</h6>\r\n                                                                </div>\r\n                                                                <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                                    <p className=\"wrapword\">{item.body}</p>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                    <div className=\"col-sm-12 nopadding\">\r\n                                                        <div className=\"message-paddding-viewed\" />\r\n                                                    </div>\r\n                                                </>\r\n                                            );\r\n                                        })}\r\n                                    </ul>\r\n                                }\r\n                            })\r\n                        ) : <Preloader isLoading={true} />\r\n                }</div>\r\n        </>);\r\n}\r\n\r\nconst Message = ({ id, avatar, instance, userAvatar }) => {\r\n    let [mounted, setMounted] = useState(false);\r\n    let [messagesList, setMessagesList] = useState([]);\r\n    let [isSending, setIsSending] = useState(false);\r\n    let [updated, setUpdated] = useState(false);\r\n    let [count, setCount] = useState(0);\r\n    let [page, setPage] = useState(1);\r\n    let [updatePage, setUpdatePage] = useState(false);\r\n    let [isDeleting, setIsDeleting] = useState(false);\r\n    let [isRestoring, setIsRestoring] = useState(false);\r\n    const fetchData = async () => {\r\n        const response = await instance.get(`/dialogs/${id}/messages?page=${page}&count=10`); // first reponse for normal render\r\n        if (response.status === 200) {\r\n            if (mounted === false) {\r\n                let array = [{ id: 1, item: response.data.items }];\r\n                setMessagesList(array);\r\n                setCount(response.data.totalCount);\r\n                setMounted(true);\r\n            } else {\r\n                setCount(response.data.totalCount);\r\n                var currentList = messagesList.reduce(\r\n                    (obj, item) => Object.assign(obj, { [item.id]: item.item }), {});\r\n                if (page > 1) {\r\n                    if (messagesList.length > 1 && updated === true) {\r\n                        if (!_.isEqual(response.data.items, currentList[page])) {\r\n                            let array = [...messagesList, messagesList[page - 1] = [page, response.data.items]];\r\n                            setMessagesList(array);\r\n                        }\r\n                    } else {\r\n                        let array = [...messagesList, { id: page, item: response.data.items }];\r\n                        setMessagesList(array)\r\n                        setUpdated(true);\r\n                    }\r\n                } else if (!_.isEqual(response.data.items, currentList)) {\r\n                    let array = [{ id: 1, item: response.data.items }]\r\n                    setMessagesList(array);\r\n                    setUpdated(false);\r\n                    console.log(\"STATE UPDATE\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = useCallback(async ({ message }) => {\r\n        if (isSending) return\r\n        setIsSending(true)\r\n        await instance.post(`/dialogs/${id}/messages`, { body: message });\r\n        setPage(page);\r\n        fetchData();\r\n        setIsSending(false);\r\n    }, [isSending]);\r\n\r\n    const restoreMessage = useCallback(async (id) => {\r\n        if (isRestoring) return\r\n        setIsRestoring(true)\r\n        await instance.put(`/dialogs/messages/${id}/restore`);\r\n        setIsRestoring(false);\r\n    }, [isRestoring]);\r\n\r\n    const deleteMessage = useCallback(async (id) => {\r\n        if (isDeleting) return\r\n        setIsDeleting(true)\r\n        await instance.delete(`/dialogs/messages/${id}`);\r\n        setIsDeleting(false);\r\n    }, [isDeleting]);\r\n\r\n    setTimeout(() => { setUpdatePage(!updatePage) }, 10000);\r\n    useEffect(() => {\r\n        if (mounted === false) {\r\n            setMounted(true);\r\n            fetchData();\r\n        }\r\n        return () => {\r\n        };\r\n    }, []);\r\n    const setPageCurrent = (page) => {\r\n        setPage(page);\r\n        setUpdated(false);\r\n        fetchData();\r\n    }\r\n    useEffect(() => {\r\n        fetchData();\r\n        return () => {\r\n        };\r\n    }, [updatePage, page]);\r\n    if (mounted === false) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    return (\r\n        <div className=\"section-dialogs-inner-active\">\r\n            <PaginationSelector userAvatar={userAvatar} avatar={avatar} id={id} restoreMessage={restoreMessage} setPageCurrent={setPageCurrent} currentPage={page} deleteMessage={deleteMessage} mainMessageData={messagesList} total={count} />\r\n            <SendMessage onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst Messages = ({ membersList, instance, profile }) => {\r\n    if (membersList === null || profile === null) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    let mainDialogsData = membersList.map((user) => (<Route key={user.id} path={`/home/dialogs/${user.id}`} render={() => <Message avatar={user.photos.small} instance={instance} key={user.id} userAvatar={user.photos.small} avatar={profile.photos.small} id={user.id} />} />));\r\n    return (\r\n        <>\r\n            <div className=\"section-dialogs-inner-active\">\r\n                {mainDialogsData}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport '../css/Dialogs//Dialogs.css';\r\nimport Members from './Members/Members';\r\nimport Message from './Members/Messages/Message';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport * as axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"9832db98-b9d3-460c-9cab-5d06ff193b07\" },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\"\r\n});\r\n\r\nconst Dialogs = () => {\r\n    let [membersList, setMembersList] = useState([]);\r\n    let [profile, setProfile] = useState(null);\r\n    const value = useSelector(state => state.authPage.id);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/profile/${value}`);\r\n            if (response.status === 200) {\r\n                setProfile(response.data);\r\n            }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n        };\r\n    }, [])\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/dialogs`);\r\n            if (response.status === 200) {\r\n                setMembersList(response.data);\r\n            }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n            setMembersList([]);\r\n        };\r\n    }, [])\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"section-dialogs\">\r\n                <div className=\"section-dialogs-inner\">\r\n                    <div className=\"col-sm-4\">\r\n                        <Members instance={instance} />\r\n                    </div>\r\n                    <Message profile={profile} instance={instance} membersList={membersList} />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Dialogs;"],"sourceRoot":""}