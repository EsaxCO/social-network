{"version":3,"sources":["components/Dialogs/Members/Member/Member.jsx","components/Dialogs/Members/Members.jsx","components/Dialogs/Members/Messages/ContentMessage.jsx","components/Dialogs/SendMessage/SendMessage.jsx","components/Dialogs/Members/Messages/MessagesContainer.jsx","components/Dialogs/Dialogs.jsx"],"names":["Member","id","name","count","status","className","to","_","require","initialState","reducer","state","action","type","number","Error","Members","instance","source","Axios","CancelToken","useReducer","dispatch","useState","membersList","setMembersList","updateCount","useCallback","useEffect","fetchData","a","get","cancelToken","token","dialogs","promises","Promise","allSettled","response","value","data","console","log","isEqual","isCancel","timer","setInterval","clearInterval","cancel","mainMembersData","map","member","hasNewMessages","newMessagesCount","key","userName","ContentMessage","total","userAvatar","avatar","restoreMessage","deleteMessage","setPageCurrent","currentPage","mainMessageData","currentId","setCurrentId","update","setUpdate","setData","handleRestoreClick","array","message","handleDeleteClick","handlePageChange","pageCurrent","e","defaultPage","backgroundColor","color","textTransform","numbers","fontWeight","format","dateStr","date","split","time","limit","pageCount","pages","hasNextPage","hasPreviousPage","previousPage","nextPage","totalPages","getPageItemProps","pageValue","style","onPageChange","page","activePage","isEmpty","item","recipientId","viewed","src","blocker","alt","includes","onClick","senderName","addedAt","body","Preloader","isLoading","SendMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","rows","SendMessage","userId","setTimeout","initialValues","formData","Messages","mounted","setMounted","messagesList","setMessagesList","isSending","setIsSending","setCount","setPage","updatePage","setUpdatePage","isDeleting","setIsDeleting","isRestoring","setIsRestoring","items","totalCount","post","put","delete","isCancelled","MessagesContainer","profile","mainDialogsData","user","path","render","photos","small","axios","withCredentials","headers","baseURL","Dialogs","setProfile","useSelector","authPage","members"],"mappings":"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","file":"static/js/4.3f7a64c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../css/Dialogs/Members/Member/Member.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Member = ({ id, name, count, status }) => {\r\n    return (\r\n        <li className=\"section-dialogs-inner-members-li\">\r\n            <NavLink className=\"section-dialogs-inner-members-li-url\" to={\"/home/dialogs/\" + id}>{name}\r\n                {status ? <div className=\"new-message\">Новых сообщений: {count}</div> : null}</NavLink>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Member;","import React from 'react';\r\nimport '../../css/Dialogs/Members/Members.css';\r\nimport Member from './Member/Member';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useReducer } from 'react';\r\nimport Axios from 'axios';\r\nvar _ = require(\"lodash\");\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'set':\r\n            return { count: action.number };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nconst Members = ({ instance }) => {\r\n    let source = Axios.CancelToken.source(); // eslint-disable-next-line\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    let [membersList, setMembersList] = useState([]);\r\n    let updateCount = useCallback((number) => {\r\n        dispatch({ type: 'set', number });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const dialogs = await instance.get(`/dialogs`, {\r\n                    cancelToken: source.token\r\n                });\r\n                const count = await instance.get(`/dialogs/messages/new/count`, {\r\n                    cancelToken: source.token\r\n                });\r\n                let promises = [dialogs, count];\r\n                let response = await Promise.allSettled(promises);\r\n                if (response[1].value.status === 200) {\r\n                    if (count === response[1].value.data) {\r\n                        updateCount(response[1].value.data);\r\n                    }\r\n                    else {\r\n                        console.log('same Members-count data');\r\n                    }\r\n                }\r\n                if (response[0].value.status === 200) {\r\n                    if (!_.isEqual(membersList, response[0].value.data)) {\r\n                        setMembersList(response[0].value.data);\r\n                    } else {\r\n                        console.log('same Members data');\r\n                    }\r\n                }\r\n\r\n            } catch (error) {\r\n                if (Axios.isCancel(error)) {\r\n                    console.log('cancel request Members');\r\n                } else {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        let timer = setInterval(() => { fetchData(); }, 10000);\r\n        fetchData();\r\n        return () => {\r\n            clearInterval(timer);\r\n            source.cancel();\r\n        };// eslint-disable-next-line\r\n    }, [membersList, instance, updateCount])\r\n    let mainMembersData = membersList.map((member) => {\r\n        return <Member status={member.hasNewMessages} count={member.newMessagesCount} key={member.id} id={member.id} name={member.userName} />;\r\n    });\r\n    return (\r\n        <ul className=\"section-dialogs-inner-members\">\r\n            {mainMembersData}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Members;","import React, { Fragment } from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Pagination from 'react-paginating';\r\nimport blocker from '../../../../img/default-avatar.png'\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\nvar _ = require(\"lodash\");\r\n\r\n\r\nconst ContentMessage = ({ total, userAvatar, avatar, restoreMessage, deleteMessage, setPageCurrent, id, currentPage, mainMessageData }) => {\r\n    let [currentId, setCurrentId] = useState([]);\r\n    let [update, setUpdate] = useState(true);\r\n    let [data, setData] = useState({});// eslint-disable-line\r\n    let handleRestoreClick = (id) => {\r\n        restoreMessage(id);\r\n        let array = currentId.map(message => { if (message !== id) { return message } else { return null } })\r\n        setCurrentId(array);\r\n    }\r\n    let handleDeleteClick = (id) => {\r\n        deleteMessage(id);\r\n        let array = [...currentId, id];\r\n        setCurrentId(array);\r\n    }\r\n    let handlePageChange = (pageCurrent, e) => {\r\n        setPageCurrent(pageCurrent);\r\n        setUpdate(false);\r\n    }\r\n    useEffect(() => {\r\n        setUpdate(true);\r\n        setData(mainMessageData);\r\n        return () => {\r\n        };\r\n    }, [mainMessageData]);\r\n    let defaultPage = {\r\n        backgroundColor: 'rgb(7, 2, 91)',\r\n        color: '#ffffff',\r\n        textTransform: 'uppercase'\r\n    }\r\n    let numbers = {\r\n        backgroundColor: '#07025b',\r\n        fontWeight: '700',\r\n        color: '#ffffff'\r\n    }\r\n    function format(dateStr) {\r\n        let date = dateStr.split('T');\r\n        let time = date[1].split(\":\");\r\n        return (date[0] + \" \" + time[0] + \":\" + time[1]);\r\n    }\r\n    return (\r\n        <>\r\n            <Pagination key={'page' + total + currentPage} className=\"pagination-style\" total={total} limit={10} pageCount={10} currentPage={currentPage} >\r\n                {({ pages, currentPage, hasNextPage, hasPreviousPage, previousPage, nextPage, totalPages, getPageItemProps }) => (\r\n                    <div>\r\n                        <button key={'first' + total + currentPage} {...getPageItemProps({ pageValue: 1, style: defaultPage, onPageChange: handlePageChange })}>first</button>\r\n                        {hasPreviousPage && (<button key={'prev' + total + currentPage} {...getPageItemProps({ pageValue: previousPage, style: numbers, onPageChange: handlePageChange })}>{'<'}</button>)}\r\n                        {pages.map(page => {\r\n                            let activePage = null;\r\n                            if (currentPage === page) {\r\n                                activePage = { backgroundColor: '#ff4067' };\r\n                                return (<button key={'active' + page + total + currentPage} {...getPageItemProps({ pageValue: page, style: activePage, onPageChange: handlePageChange })}>{page}</button>);\r\n                            }\r\n                            return (<button key={page + total + currentPage} {...getPageItemProps({ pageValue: page, style: activePage, onPageChange: handlePageChange })}>{page}</button>);\r\n                        })}\r\n                        {hasNextPage && (<button key={'next' + total + currentPage} {...getPageItemProps({ pageValue: nextPage, style: numbers, onPageChange: handlePageChange })}>{'>'}</button>)}\r\n                        <button key={'last' + total + currentPage} {...getPageItemProps({ pageValue: totalPages, style: defaultPage, onPageChange: handlePageChange })}>last</button>\r\n                    </div>\r\n                )}\r\n            </Pagination>\r\n            <div className=\"row\">\r\n                {((!_.isEmpty(mainMessageData)) && (update))\r\n                    ? <ul>\r\n                        {mainMessageData.item.map((item) => {\r\n                            return (item.recipientId === id\r\n                                ? <Fragment key={item.id}>\r\n                                    <div className={(item.viewed ? \"section-dialogs-inner-active-message col-sm-6 col-sm-offset-6\" : \"section-dialogs-inner-active-messagenew col-sm-6 col-sm-offset-6\")}>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"content-message\">\r\n                                                <div className=\"col-sm-4 content-message-avatar\">\r\n                                                    <img className=\"img-responsive rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                                                    {(currentId.includes(item.id))\r\n                                                        ? <button onClick={() => { handleRestoreClick(item.id) }} className=\"content-message-button-restore\">restore</button>\r\n                                                        : <button onClick={() => { handleDeleteClick(item.id) }} className=\"content-message-button-delete\">delete</button>}\r\n                                                </div>\r\n                                                <div className=\"col-sm-8 content-message-text\">\r\n                                                    <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                        <h5>{item.senderName}</h5>\r\n                                                        <h6>{format(item.addedAt)}</h6>\r\n                                                    </div>\r\n                                                    <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                        <div className=\"wrapword\">{item.body}</div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-sm-12 nopadding\">\r\n                                        {!item.viewed ? <div className=\"viewed-status\">Не просмотрено</div> : <div className=\"message-paddding-viewed\" />}\r\n                                    </div></Fragment>\r\n                                : <Fragment key={item.id}><div className=\"section-dialogs-inner-active-message col-sm-6\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"content-message\">\r\n                                            <div className=\"col-sm-4 content-message-avatar\">\r\n                                                <img className=\"img-responsive rounded-circle\" src={userAvatar ? userAvatar : blocker} alt=\"\" />\r\n                                                {(currentId.includes(item.id))\r\n                                                    ? <button onClick={() => { handleRestoreClick(item.id) }} className=\"content-message-button-restore\">restore</button>\r\n                                                    : <button onClick={() => { handleDeleteClick(item.id) }} className=\"content-message-button-delete\">delete</button>}\r\n                                            </div>\r\n                                            <div className=\"col-sm-8 col-centered content-message-text\">\r\n                                                <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                    <h5>{item.senderName}</h5>\r\n                                                    <h6>{format(item.addedAt)}</h6>\r\n                                                </div>\r\n                                                <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                    <p className=\"wrapword\">{item.body}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                    <div className=\"col-sm-12 nopadding\">\r\n                                        <div className=\"message-paddding-viewed\" />\r\n                                    </div>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                    : <div className=\"col-sm-2 col-sm-offset-5 MessagesLoaderInner\"><Preloader isLoading={true} /></div>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ContentMessage;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport '../../css/Dialogs/SendMessage/SendMessage.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { useState } from 'react';\r\nimport Preloader from '../../commons/Preloader/Preloader';\r\n\r\n\r\nconst SendMessageForm = ({ handleSubmit, update }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"section-dialogs-inner-newmessage\">\r\n                <Field name=\"message\" component=\"textarea\" className=\"section-dialogs-inner-newmessage-input\" id=\"\" rows=\"2\"></Field>\r\n                <button className=\"section-dialogs-inner-newmessage-button\">Send Message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst SendMessageFormRedux = reduxForm({ form: \"SendMessageFormn\" })(SendMessageForm);\r\n\r\n\r\nconst SendMessage = ({ onSubmit,userId }) => {\r\n    let messageValue = { message: \"\" }\r\n    let [update, setUpdate] = useState(false);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setUpdate(false);\r\n        }, 500);\r\n        return () => {\r\n        };\r\n    }, [update]);\r\n    let handleSubmitClick = (formData) => {\r\n        debugger;\r\n        onSubmit(formData,userId);\r\n        setUpdate(true);\r\n    }\r\n    return (\r\n        (!update ? <SendMessageFormRedux update={update} initialValues={messageValue} onSubmit={handleSubmitClick} /> : <div className=\"section-users-elements-status\"><Preloader isLoading={true} /></div>)\r\n    );\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport '../../../css/Dialogs/Members/Messages/Message.css';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport ContentMessage from './ContentMessage'\r\nimport { Route } from 'react-router-dom';\r\nimport SendMessage from '../../SendMessage/SendMessage';\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\nimport Axios from 'axios';\r\nvar _ = require(\"lodash\");\r\n\r\n\r\nconst Messages = ({ id, avatar, instance, userAvatar }) => {\r\n    let [mounted, setMounted] = useState(false); // first render control\r\n    let [messagesList, setMessagesList] = useState({}); // messagesArray\r\n    let [isSending, setIsSending] = useState(false); // control requests status\r\n    let [count, setCount] = useState(0); // total messages count\r\n    let [page, setPage] = useState(1); // control pages\r\n    let [updatePage, setUpdatePage] = useState(false); // refreshing variable \r\n    let [isDeleting, setIsDeleting] = useState(false); // control message deleting\r\n    let [isRestoring, setIsRestoring] = useState(false); // control message restoring\r\n    let source = Axios.CancelToken.source(); // source for cancel axios\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await instance.get(`/dialogs/${id}/messages?page=${page}&count=10`, {\r\n                cancelToken: source.token\r\n            });\r\n            if (response.status === 200) {\r\n                if (mounted === false) {\r\n                    let array = { id: 1, item: response.data.items }; // first render with no props\r\n                    setMessagesList(array); // add first page\r\n                    setCount(response.data.totalCount);\r\n                    setMounted(true);\r\n                } else {\r\n                    if (!_.isEqual(response.data.items, messagesList.item)) { // another pages\r\n                        let array = { id: page, item: response.data.items };\r\n                        setMessagesList(array);\r\n                    } else {\r\n                        console.log(\"SAME PAGE\");\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            if (Axios.isCancel(error)) {\r\n                console.log('cancel request Messages');\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = useCallback(async (formData, userId) => {\r\n        if (isSending) return\r\n        setIsSending(true)\r\n        await instance.post(`/dialogs/${userId}/messages`, { body: formData.message, cancelToken: source.token });\r\n        setUpdatePage(updatePage => !updatePage); // force update\r\n        setIsSending(false);// eslint-disable-next-line\r\n    }, [isSending, instance]);\r\n    const restoreMessage = useCallback(async (id) => {\r\n        if (isRestoring) return\r\n        setIsRestoring(true)\r\n        await instance.put(`/dialogs/messages/${id}/restore`);\r\n        setIsRestoring(false);\r\n    }, [isRestoring, instance]);\r\n    const deleteMessage = useCallback(async (id) => {\r\n        if (isDeleting) return\r\n        setIsDeleting(true)\r\n        await instance.delete(`/dialogs/messages/${id}`);\r\n        setIsDeleting(false);\r\n    }, [isDeleting, instance]);\r\n    const setPageCurrent = (page) => {\r\n        setPage(page);\r\n    }\r\n    useEffect(() => {\r\n        let isCancelled = true;\r\n        if (isCancelled) { var timer = setInterval(() => { fetchData(); }, 10000) };\r\n        fetchData();\r\n        return () => {\r\n            isCancelled = false;\r\n            source.cancel();\r\n            clearInterval(timer);\r\n        };// eslint-disable-next-line\r\n    }, [updatePage, page, messagesList]);\r\n    useEffect(() => {\r\n        return () => {\r\n            source.cancel();\r\n        };// eslint-disable-next-line\r\n    }, []);\r\n    if (mounted === false) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    return (\r\n        <div key={\"section-dialogs-inner-active\"} className=\"section-dialogs-inner-active\">\r\n            <ContentMessage userAvatar={userAvatar} avatar={avatar} id={id} restoreMessage={restoreMessage} setPageCurrent={setPageCurrent} currentPage={page} deleteMessage={deleteMessage} mainMessageData={messagesList} total={count} />\r\n            <SendMessage userId={id} onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst MessagesContainer = ({ membersList, instance, profile }) => {\r\n    if (membersList === null || profile === null) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    let mainDialogsData = membersList.map((user) => (<Route key={user.id} path={`/home/dialogs/${user.id}`} render={() => <Messages instance={instance} key={user.id} userAvatar={user.photos.small} avatar={profile.photos.small} id={user.id} />} />));\r\n    return (\r\n        <>\r\n            {mainDialogsData}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MessagesContainer;","import React from 'react';\r\nimport '../css/Dialogs//Dialogs.css';\r\nimport Members from './Members/Members';\r\nimport MessagesContainer from './Members/Messages/MessagesContainer';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Axios, * as axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"9832db98-b9d3-460c-9cab-5d06ff193b07\" },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\"\r\n});\r\n\r\nconst Dialogs = () => {\r\n    let [membersList, setMembersList] = useState([]);\r\n    let [profile, setProfile] = useState(null);\r\n    const value = useSelector(state => state.authPage.id);\r\n    useEffect(() => {\r\n        let source = Axios.CancelToken.source(); // axios cancel control\r\n        const fetchData = async () => {\r\n            try {\r\n                const dialogs = await instance.get(`/dialogs`, {\r\n                    cancelToken: source.token\r\n                });\r\n                const profile = await instance.get(`/profile/${value}`, {\r\n                    cancelToken: source.token\r\n                });\r\n                if (dialogs.status === 200) {\r\n                    setMembersList(dialogs.data);\r\n                }\r\n                if (profile.status === 200) {\r\n                    setProfile(profile.data);\r\n                }\r\n            } catch (error) {\r\n                if (Axios.isCancel(error)) {\r\n                    console.log('cancel request Dialogs');\r\n                } else {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n            source.cancel();\r\n        };\r\n    }, [value])\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"section-dialogs\">\r\n                <div className=\"section-dialogs-inner\">\r\n                    <div className=\"col-sm-4\">\r\n                        <Members members={membersList} instance={instance} />\r\n                    </div>\r\n                    <MessagesContainer profile={profile} instance={instance} membersList={membersList} />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Dialogs;"],"sourceRoot":""}