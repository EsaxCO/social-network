{"version":3,"sources":["components/Dialogs/Members/Member/Member.jsx","components/Dialogs/Members/Members.jsx","components/Dialogs/SendMessage/SendMessage.jsx","components/Dialogs/Members/Messages/Message.jsx","components/Dialogs/Dialogs.jsx"],"names":["Member","id","name","count","status","className","to","initialState","reducer","state","action","type","number","Error","Members","instance","useReducer","dispatch","useState","membersList","setMembersList","updated","setUpdated","updateCount","useCallback","myTimeout","setTimeout","useEffect","fetchData","a","get","response","data","fetchNewData","clearTimeout","mainMembersData","map","member","hasNewMessages","newMessagesCount","key","userName","SendMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","rows","SendMessage","_","require","PaginationSelector","total","avatar","setPageCurrent","currentPage","mainMessageData","handlePageChange","pageCurrent","e","defaultPage","backgroundColor","color","textTransform","numbers","fontWeight","limit","pageCount","pages","hasNextPage","hasPreviousPage","previousPage","nextPage","totalPages","getPageItemProps","pageValue","style","onPageChange","page","activePage","item","recipientId","body","src","blocker","alt","Preloader","isLoading","Message","mounted","setMounted","messagesList","setMessagesList","isSending","setIsSending","setCount","setPage","updatePage","setUpdatePage","array","items","totalCount","currentList","reduce","obj","Object","assign","length","isEqual","console","log","message","post","Messages","mainDialogsData","user","path","render","photos","small","axios","withCredentials","headers","baseURL","Dialogs"],"mappings":"0SAaeA,EATA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC/B,OACI,wBAAIC,UAAU,oCACV,kBAAC,IAAD,CAASA,UAAU,uCAAuCC,GAAI,iBAAmBL,GAAKC,EACjFE,EAAS,yBAAKC,UAAU,eAAf,0FAA+CF,GAAe,QCClFI,EAAe,CAAEJ,MAAO,GAE9B,SAASK,EAAQC,EAAOC,GACpB,OAAQA,EAAOC,MACX,IAAK,MACD,MAAO,CAAER,MAAOO,EAAOE,QAC3B,QACI,MAAM,IAAIC,OAKtB,IAyCeC,EAzCC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,qBAAWR,EAASD,GADhB,mBAChBU,GADgB,aAEMC,mBAAS,IAFf,mBAEzBC,EAFyB,KAEZC,EAFY,OAGFF,oBAAS,GAHP,mBAGzBG,EAHyB,KAGhBC,EAHgB,KAI1BC,EAAcC,uBAAY,SAACZ,GAC3BK,EAAS,CAAEN,KAAM,MAAOC,cAExBa,EAAYC,YAAW,WACvBJ,GAAYD,KACb,MACHM,qBAAU,WACN,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACSd,EAASe,IAAT,YADT,OAEU,OADlBC,EADQ,QAED3B,QACLe,IAAgBY,EAASC,MACzBZ,EAAeW,EAASC,MAJlB,2CAAH,qDAgBf,OARkB,uCAAG,4BAAAH,EAAA,sEACMd,EAASe,IAAT,+BADN,OAEO,OADlBC,EADW,QAEJ3B,QACTmB,EAAYQ,EAASC,MAHR,2CAAH,oDAMlBC,GACAL,IACO,WACHM,aAAaT,MAElB,CAACJ,IACJ,IAAIc,EAAkBhB,EAAYiB,KAAI,SAACC,GACnC,OAAO,kBAAC,EAAD,CAAQjC,OAAQiC,EAAOC,eAAgBnC,MAAOkC,EAAOE,iBAAkBC,IAAKH,EAAOpC,GAAIA,GAAIoC,EAAOpC,GAAIC,KAAMmC,EAAOI,cAE9H,OACI,wBAAIpC,UAAU,iCACT8B,I,6EC1CPO,EAAuBC,YAAU,CAAEC,KAAM,oBAAlBD,EAXL,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACvB,OACI,0BAAMC,SAAUD,EAAc3C,KAAK,eAC/B,yBAAKG,UAAU,oCACX,kBAAC0C,EAAA,EAAD,CAAO7C,KAAK,UAAU8C,UAAU,WAAW3C,UAAU,yCAAyCJ,GAAG,GAAGgD,KAAK,MACzG,4BAAQ5C,UAAU,2CAAlB,qBAeD6C,EANK,SAAC,GAAkB,IAAhBJ,EAAe,EAAfA,SACnB,OACI,kBAACJ,EAAD,CAAsBI,SAAUA,K,iBCVpCK,EAAIC,EAAQ,KAEVC,EAAqB,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,OAAQC,EAAuD,EAAvDA,eAAgBvD,EAAuC,EAAvCA,GAAIwD,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBACtEC,EAAmB,SAACC,EAAaC,GACjCL,EAAeI,IAEfE,EAAc,CACdC,gBAAiB,gBACjBC,MAAM,UACNC,cAAe,aAEfC,EAAU,CACVH,gBAAiB,UACjBI,WAAY,MACZH,MAAO,WAEX,OACI,oCACI,kBAAC,IAAD,CACI3D,UAAU,mBACViD,MAAOA,EACPc,MAAO,GACPC,UAAW,GACXZ,YAAaA,IAEZ,gBACGa,EADH,EACGA,MACAb,EAFH,EAEGA,YACAc,EAHH,EAGGA,YACAC,EAJH,EAIGA,gBACAC,EALH,EAKGA,aACAC,EANH,EAMGA,SACAC,EAPH,EAOGA,WACAC,EARH,EAQGA,iBARH,OAUO,6BACI,2BACQA,EAAiB,CACjBC,UAAW,EACXC,MAAOhB,EACPiB,aAAcpB,IAJtB,SASCa,GACG,2BACQI,EAAiB,CACjBC,UAAWJ,EACXK,MAAOZ,EACPa,aAAcpB,IAGjB,KAIRW,EAAMlC,KAAI,SAAA4C,GACP,IAAIC,EAAa,KAIjB,OAHIxB,IAAgBuB,IAChBC,EAAa,CAAElB,gBAAiB,YAGhC,2BACQa,EAAiB,CACjBC,UAAWG,EACXxC,IAAKwC,EACLF,MAAOG,EACPF,aAAcpB,IAGjBqB,MAKZT,GACG,2BACQK,EAAiB,CACjBC,UAAWH,EACXI,MAAOZ,EACPa,aAAcpB,IAGjB,KAIT,2BACQiB,EAAiB,CACjBC,UAAWF,EACXG,MAAOhB,EACPiB,aAAcpB,IAJtB,YAaO,GAAnBD,EAEQA,EAAgBtB,KAAI,SAAAkC,GAChB,GAAIA,EAAMrE,KAAOwD,EACb,OAAO,4BACFa,EAAMY,KAAK9C,KAAI,SAAC8C,GACb,OAAQA,EAAKC,cAAgBlF,EACvB,yBAAKI,UAAU,aAAY,yBAAKmC,IAAK0C,EAAKjF,GAAII,UAAU,iEACtD,yBAAKA,UAAU,OACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,0DACX,uBAAGA,UAAU,YAAY6E,EAAKE,QAGtC,yBAAK/E,UAAU,YACX,yBAAKA,UAAU,+CACX,yBAAKA,UAAU,iBAAiBgF,IAAK9B,GAAkB+B,IAASC,IAAI,UAMlF,yBAAKlF,UAAU,aAAY,yBAAKmC,IAAK0C,EAAKjF,GAAII,UAAU,iDACtD,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,+CACX,yBAAKA,UAAU,iBAAiBgF,IAAK9B,GAAkB+B,IAASC,IAAI,OAG5E,yBAAKlF,UAAU,aACX,yBAAKA,UAAU,0DACX,2BAAI6E,EAAKE,kBAW7C,kBAACI,EAAA,EAAD,CAAWC,WAAW,MAKxCC,EAAU,SAAC,GAA8B,IAA5BzF,EAA2B,EAA3BA,GAAIsD,EAAuB,EAAvBA,OAAQxC,EAAe,EAAfA,SAAe,EACdG,oBAAS,GADK,mBACrCyE,EADqC,KAC5BC,EAD4B,OAEJ1E,mBAAS,IAFL,mBAErC2E,EAFqC,KAEvBC,EAFuB,OAGV5E,oBAAS,GAHC,mBAGrC6E,EAHqC,KAG1BC,EAH0B,OAId9E,oBAAS,GAJK,mBAIrCG,EAJqC,KAI5BC,EAJ4B,OAKlBJ,mBAAS,GALS,mBAKrCf,EALqC,KAK9B8F,EAL8B,OAMpB/E,mBAAS,GANW,mBAMrC8D,EANqC,KAM/BkB,EAN+B,OAORhF,oBAAS,GAPD,mBAOrCiF,EAPqC,KAOzBC,EAPyB,KASpCxE,EAAS,uCAAG,sCAAAC,EAAA,sEACSd,EAASe,IAAT,mBAAyB7B,EAAzB,0BAA6C+E,EAA7C,cADT,OAEU,OADlBjD,EADQ,QAED3B,UACO,IAAZuF,GACIU,EAAQ,CAAC,CAAEpG,GAAI,EAAGiF,KAAMnD,EAASC,KAAKsE,QAC1CR,EAAgBO,GAChBJ,EAASlE,EAASC,KAAKuE,YACvBX,GAAW,KAEXK,EAASlE,EAASC,KAAKuE,YACnBC,EAAcX,EAAaY,QAC3B,SAACC,EAAKxB,GAAN,OAAeyB,OAAOC,OAAOF,EAAdC,OAAA,IAAAA,CAAA,GAAsBzB,EAAKjF,GAAKiF,EAAKA,SAAS,IAC7DF,EAAO,EACHa,EAAagB,OAAS,IAAiB,IAAZxF,EACtB8B,EAAE2D,QAAQ/E,EAASC,KAAKsE,MAAOE,EAAYxB,MACxCqB,EADgD,sBACpCR,GADoC,CACtBA,EAAab,EAAO,GAAK,CAACA,EAAMjD,EAASC,KAAKsE,SAC5ER,EAAgBO,KAGhBA,EADD,sBACaR,GADb,CAC2B,CAAE5F,GAAI+E,EAAME,KAAMnD,EAASC,KAAKsE,SAC9DR,EAAgBO,GAChB/E,GAAW,IAEP6B,EAAE2D,QAAQ/E,EAASC,KAAKsE,MAAOE,KACnCH,EAAQ,CAAC,CAAEpG,GAAI,EAAGiF,KAAMnD,EAASC,KAAKsE,QAC1CR,EAAgBO,GAChB/E,GAAW,GACXyF,QAAQC,IAAI,mBA3BV,2CAAH,qDAgCTlE,EAAWtB,sBAAW,uCAAC,6BAAAK,EAAA,yDAASoF,EAAT,EAASA,SAC9BlB,EADqB,wDAEzBC,GAAa,GAFY,SAGnBjF,EAASmG,KAAT,mBAA0BjH,EAA1B,aAAyC,CAAEmF,KAAM6B,IAH9B,OAIzBf,EAAQlB,GACRpD,IACAoE,GAAa,GANY,2CAAD,sDAOzB,CAACD,IACJrE,YAAW,WAAQ0E,GAAeD,KAAe,KACjDxE,qBAAU,WAKN,OAJgB,IAAZgE,IACAC,GAAW,GACXhE,KAEG,eAER,IAWH,OALAD,qBAAU,WAEN,OADAC,IACO,eAER,CAACuE,EAAYnB,KACA,IAAZW,EACO,yBAAKtF,UAAU,kBAAiB,kBAACmF,EAAA,EAAD,CAAWC,WAAW,KAG7D,yBAAKpF,UAAU,gCACX,kBAAC,EAAD,CAAoBkD,OAAQA,EAAQtD,GAAIA,EAAIuD,eAf7B,SAACwB,GACpBkB,EAAQlB,GACR1D,GAAW,GACXM,KAYgF6B,YAAauB,EAAMtB,gBAAiBmC,EAAcvC,MAAOnD,IACrI,kBAAC,EAAD,CAAa2C,SAAUA,MAoBpBqE,EAdE,SAAC,GAA+B,IAA7BhG,EAA4B,EAA5BA,YAAaJ,EAAe,EAAfA,SAC7B,GAAoB,OAAhBI,EACA,OAAO,yBAAKd,UAAU,kBAAiB,kBAACmF,EAAA,EAAD,CAAWC,WAAW,KAEjE,IAAI2B,EAAkBjG,EAAYiB,KAAI,SAACiF,GAAD,OAAW,kBAAC,IAAD,CAAO7E,IAAK6E,EAAKpH,GAAIqH,KAAI,wBAAmBD,EAAKpH,IAAMsH,OAAQ,kBAAM,kBAAC,EAAD,CAASxG,SAAUA,EAAUyB,IAAK6E,EAAKpH,GAAIsD,OAAQ8D,EAAKG,OAAOC,MAAOxH,GAAIoH,EAAKpH,WACrM,OACI,oCACI,yBAAKI,UAAU,gCACV+G,KC7OXrG,E,MAAW2G,OAAa,CAC1BC,iBAAiB,EACjBC,QAAS,CAAE,UAAW,wCACtBC,QAAS,kDA+BEC,UA5BC,WAAO,IAAD,EACkB5G,mBAAS,IAD3B,mBACbC,EADa,KACAC,EADA,KAclB,OAZAO,qBAAU,WAQN,OAPe,uCAAG,4BAAAE,EAAA,sEACSd,EAASe,IAAT,YADT,OAEU,OADlBC,EADQ,QAED3B,QACTgB,EAAeW,EAASC,MAHd,2CAAH,oDAMfJ,GACO,WACHR,EAAe,OAEpB,IAEC,kBAAC,IAAD,KACI,yBAAKf,UAAU,mBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAASU,SAAUA,KAEvB,kBAAC,EAAD,CAASA,SAAUA,EAAUI,YAAaA","file":"static/js/4.a4777f10.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../css/Dialogs/Members/Member/Member.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Member = ({ id, name, count, status }) => {\r\n    return (\r\n        <li className=\"section-dialogs-inner-members-li\">\r\n            <NavLink className=\"section-dialogs-inner-members-li-url\" to={\"/home/dialogs/\" + id}>{name}\r\n                {status ? <div className=\"new-message\">Новых сообщений: {count}</div> : null}</NavLink>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Member;","import React from 'react';\r\nimport '../../css/Dialogs/Members/Members.css';\r\nimport Member from './Member/Member';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useReducer } from 'react';\r\n\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'set':\r\n            return { count: action.number };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\n\r\nconst Members = ({ instance }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    let [membersList, setMembersList] = useState([]);\r\n    let [updated, setUpdated] = useState(false);\r\n    let updateCount = useCallback((number) => {\r\n        dispatch({ type: 'set', number });\r\n    })\r\n    let myTimeout = setTimeout(function () {\r\n        setUpdated(!updated);\r\n    }, 35000);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/dialogs`);\r\n            if (response.status === 200) {\r\n                if (membersList !== response.data) {\r\n                    setMembersList(response.data);\r\n                }\r\n            }\r\n        }\r\n        const fetchNewData = async () => {\r\n            const response = await instance.get(`/dialogs/messages/new/count`);\r\n            if (response.status === 200) {\r\n                updateCount(response.data);\r\n            }\r\n        }\r\n        fetchNewData();\r\n        fetchData();\r\n        return () => {\r\n            clearTimeout(myTimeout);\r\n        };\r\n    }, [updated])\r\n    let mainMembersData = membersList.map((member) => {\r\n        return <Member status={member.hasNewMessages} count={member.newMessagesCount} key={member.id} id={member.id} name={member.userName} />;\r\n    });\r\n    return (\r\n        <ul className=\"section-dialogs-inner-members\">\r\n            {mainMembersData}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Members;","import React from 'react';\r\nimport '../../css/Dialogs/SendMessage/SendMessage.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst SendMessageForm = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} name=\"SendMessage\">\r\n            <div className=\"section-dialogs-inner-newmessage\">\r\n                <Field name=\"message\" component=\"textarea\" className=\"section-dialogs-inner-newmessage-input\" id=\"\" rows=\"2\"></Field>\r\n                <button className=\"section-dialogs-inner-newmessage-button\">Send Message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst SendMessageFormRedux = reduxForm({ form: \"SendMessageFormn\" })(SendMessageForm);\r\n\r\n\r\nconst SendMessage = ({ onSubmit }) => {\r\n    return (\r\n        <SendMessageFormRedux onSubmit={onSubmit} />\r\n    );\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport '../../../css/Dialogs/Members/Messages/Message.css';\r\nimport blocker from '../../../../img/default-avatar.png'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport SendMessage from '../../SendMessage/SendMessage';\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\nimport { useCallback } from 'react';\r\nimport Pagination from 'react-paginating';\r\nvar _ = require(\"lodash\");\r\n\r\nconst PaginationSelector = ({ total, avatar, setPageCurrent, id, currentPage, mainMessageData }) => {\r\n    let handlePageChange = (pageCurrent, e) => {\r\n        setPageCurrent(pageCurrent);\r\n    }\r\n    let defaultPage = {\r\n        backgroundColor: 'rgb(7, 2, 91)',\r\n        color:'#ffffff',\r\n        textTransform: 'uppercase'\r\n    }\r\n    let numbers = {\r\n        backgroundColor: '#07025b',\r\n        fontWeight: '700',\r\n        color: '#ffffff'\r\n    }\r\n    return (\r\n        <>\r\n            <Pagination\r\n                className=\"pagination-style\"\r\n                total={total}\r\n                limit={10}\r\n                pageCount={10}\r\n                currentPage={currentPage}\r\n            >\r\n                {({\r\n                    pages,\r\n                    currentPage,\r\n                    hasNextPage,\r\n                    hasPreviousPage,\r\n                    previousPage,\r\n                    nextPage,\r\n                    totalPages,\r\n                    getPageItemProps\r\n                }) => (\r\n                        <div>\r\n                            <button\r\n                                {...getPageItemProps({\r\n                                    pageValue: 1,\r\n                                    style: defaultPage,\r\n                                    onPageChange: handlePageChange\r\n                                })}\r\n                            >\r\n                                first\r\n              </button>\r\n                            {hasPreviousPage && (\r\n                                <button\r\n                                    {...getPageItemProps({\r\n                                        pageValue: previousPage,\r\n                                        style: numbers,\r\n                                        onPageChange: handlePageChange\r\n                                    })}\r\n                                >\r\n                                    {'<'}\r\n                                </button>\r\n                            )}\r\n\r\n                            {pages.map(page => {\r\n                                let activePage = null;\r\n                                if (currentPage === page) {\r\n                                    activePage = { backgroundColor: '#ff4067' };\r\n                                }\r\n                                return (\r\n                                    <button\r\n                                        {...getPageItemProps({\r\n                                            pageValue: page,\r\n                                            key: page,\r\n                                            style: activePage,\r\n                                            onPageChange: handlePageChange\r\n                                        })}\r\n                                    >\r\n                                        {page}\r\n                                    </button>\r\n                                );\r\n                            })}\r\n\r\n                            {hasNextPage && (\r\n                                <button\r\n                                    {...getPageItemProps({\r\n                                        pageValue: nextPage,\r\n                                        style: numbers,\r\n                                        onPageChange: handlePageChange\r\n                                    })}\r\n                                >\r\n                                    {'>'}\r\n                                </button>\r\n                            )}\r\n\r\n                            <button\r\n                                {...getPageItemProps({\r\n                                    pageValue: totalPages,\r\n                                    style: defaultPage,\r\n                                    onPageChange: handlePageChange\r\n                                })}\r\n                            >\r\n                                last\r\n              </button>\r\n                        </div>\r\n                    )}\r\n            </Pagination>\r\n            {\r\n                mainMessageData != 0 ?\r\n                    (\r\n                        mainMessageData.map(pages => {\r\n                            if (pages.id === currentPage) {\r\n                                return <ul>\r\n                                    {pages.item.map((item) => {\r\n                                        return (item.recipientId === id\r\n                                            ? <div className=\"col-sm-12\"><div key={item.id} className=\"section-dialogs-inner-active-message col-sm-6 col-sm-offset-6\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-sm-10 col-centered\">\r\n                                                        <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                            <p className=\"wrapword\">{item.body}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"col-sm-2\">\r\n                                                        <div className=\"section-dialogs-inner-active-message-avatar\">\r\n                                                            <img className=\"rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            </div>\r\n                                            : <div className=\"col-sm-12\"><div key={item.id} className=\"section-dialogs-inner-active-message col-sm-6\">\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-sm-2\">\r\n                                                        <div className=\"section-dialogs-inner-active-message-avatar\">\r\n                                                            <img className=\"rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"col-sm-10\">\r\n                                                        <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                                                            <p>{item.body}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            }\r\n                        })\r\n                    ) : <Preloader isLoading={true} />\r\n            }\r\n        </>);\r\n}\r\n\r\nconst Message = ({ id, avatar, instance }) => {\r\n    let [mounted, setMounted] = useState(false);\r\n    let [messagesList, setMessagesList] = useState([]);\r\n    let [isSending, setIsSending] = useState(false);\r\n    let [updated, setUpdated] = useState(false);\r\n    let [count, setCount] = useState(0);\r\n    let [page, setPage] = useState(1);\r\n    let [updatePage, setUpdatePage] = useState(false);\r\n\r\n    const fetchData = async () => {\r\n        const response = await instance.get(`/dialogs/${id}/messages?page=${page}&count=10`); // first reponse for normal render\r\n        if (response.status === 200) {\r\n            if (mounted === false) {\r\n                let array = [{ id: 1, item: response.data.items }];\r\n                setMessagesList(array);\r\n                setCount(response.data.totalCount);\r\n                setMounted(true);\r\n            } else {\r\n                setCount(response.data.totalCount);\r\n                var currentList = messagesList.reduce(\r\n                    (obj, item) => Object.assign(obj, { [item.id]: item.item }), {});\r\n                if (page > 1) {\r\n                    if (messagesList.length > 1 && updated === true) {\r\n                        if (!_.isEqual(response.data.items, currentList[page])) {\r\n                            let array = [...messagesList, messagesList[page - 1] = [page, response.data.items]];\r\n                            setMessagesList(array);\r\n                        }\r\n                    } else {\r\n                        let array = [...messagesList, { id: page, item: response.data.items }];\r\n                        setMessagesList(array)\r\n                        setUpdated(true);\r\n                    }\r\n                } else if (!_.isEqual(response.data.items, currentList)) {\r\n                    let array = [{ id: 1, item: response.data.items }]\r\n                    setMessagesList(array);\r\n                    setUpdated(false);\r\n                    console.log(\"STATE UPDATE\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = useCallback(async ({ message }) => {\r\n        if (isSending) return\r\n        setIsSending(true)\r\n        await instance.post(`/dialogs/${id}/messages`, { body: message });\r\n        setPage(page);\r\n        fetchData();\r\n        setIsSending(false);\r\n    }, [isSending])\r\n    setTimeout(() => { setUpdatePage(!updatePage) }, 10000);\r\n    useEffect(() => {\r\n        if (mounted === false) {\r\n            setMounted(true);\r\n            fetchData();\r\n        }\r\n        return () => {\r\n        };\r\n    }, []);\r\n    const setPageCurrent = (page) => {\r\n        setPage(page);\r\n        setUpdated(false);\r\n        fetchData();\r\n    }\r\n    useEffect(() => {\r\n        fetchData();\r\n        return () => {\r\n        };\r\n    }, [updatePage, page]);\r\n    if (mounted === false) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    return (\r\n        <div className=\"section-dialogs-inner-active\">\r\n            <PaginationSelector avatar={avatar} id={id} setPageCurrent={setPageCurrent} currentPage={page} mainMessageData={messagesList} total={count} />\r\n            <SendMessage onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst Messages = ({ membersList, instance }) => {\r\n    if (membersList === null) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    let mainDialogsData = membersList.map((user) => (<Route key={user.id} path={`/home/dialogs/${user.id}`} render={() => <Message instance={instance} key={user.id} avatar={user.photos.small} id={user.id} />} />));\r\n    return (\r\n        <>\r\n            <div className=\"section-dialogs-inner-active\">\r\n                {mainDialogsData}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport '../css/Dialogs//Dialogs.css';\r\nimport Members from './Members/Members';\r\nimport Message from './Members/Messages/Message';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"9832db98-b9d3-460c-9cab-5d06ff193b07\" },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\"\r\n});\r\n\r\nconst Dialogs = () => {\r\n    let [membersList, setMembersList] = useState([]);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/dialogs`);\r\n            if (response.status === 200) {\r\n                setMembersList(response.data);\r\n            }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n            setMembersList([]);\r\n        };\r\n    }, [])\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"section-dialogs\">\r\n                <div className=\"section-dialogs-inner\">\r\n                    <div className=\"col-sm-4\">\r\n                        <Members instance={instance} />\r\n                    </div>\r\n                    <Message instance={instance} membersList={membersList} />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Dialogs;"],"sourceRoot":""}