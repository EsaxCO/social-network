{"version":3,"sources":["components/Dialogs/Members/Member/Member.jsx","components/Dialogs/Members/Members.jsx","components/Dialogs/SendMessage/SendMessage.jsx","components/Dialogs/Members/Messages/Message.jsx","components/Dialogs/Dialogs.jsx"],"names":["Member","id","name","count","className","to","initialState","reducer","state","action","type","number","Error","Members","instance","useReducer","dispatch","useState","membersList","setMembersList","updated","setUpdated","updateCount","useCallback","myTimeout","setTimeout","useEffect","fetchData","a","get","response","status","data","fetchNewData","clearTimeout","mainMembersData","map","member","key","userName","SendMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","rows","SendMessage","Message","avatar","mounted","setMounted","messagesList","setMessagesList","isSending","setIsSending","items","length","console","log","i","message","post","body","Preloader","isLoading","mainMessageData","item","recipientId","src","blocker","alt","Messages","mainDialogsData","user","path","render","photos","small","axios","withCredentials","headers","baseURL","Dialogs"],"mappings":"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","file":"static/js/4.c17b80bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../css/Dialogs/Members/Member/Member.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Member = ({id,name,count}) => {\r\n    return (\r\n        <li className=\"section-dialogs-inner-members-li\">\r\n            <NavLink className=\"section-dialogs-inner-members-li-url\" to={\"/home/dialogs/\" + id}>{name}\r\n            <div className=\"new-message\">Новых сообщений: {count}</div></NavLink>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Member;","import React from 'react';\r\nimport '../../css/Dialogs/Members/Members.css';\r\nimport Member from './Member/Member';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useReducer } from 'react';\r\n\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'set':\r\n            return { count: action.number };\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\n\r\nconst Members = ({ instance }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    let [membersList, setMembersList] = useState([]);\r\n    let [updated, setUpdated] = useState(false);\r\n    let updateCount = useCallback((number) => {\r\n        dispatch({ type: 'set', number });\r\n    })\r\n    let myTimeout = setTimeout(function () {\r\n        setUpdated(!updated);\r\n    }, 35000);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/dialogs`);\r\n            if (response.status === 200) {\r\n                if (membersList !== response.data) {\r\n                    setMembersList(response.data);\r\n                }\r\n            }\r\n        }\r\n        const fetchNewData = async () => {\r\n            const response = await instance.get(`/dialogs/messages/new/count`);\r\n            if (response.status === 200) {\r\n                updateCount(response.data);\r\n            }\r\n        }\r\n        fetchNewData();\r\n        fetchData();\r\n        return () => {\r\n            clearTimeout(myTimeout);\r\n        };\r\n    }, [updated])\r\n    let mainMembersData = membersList.map((member) => {\r\n        return <Member count={state.count} key={member.id} id={member.id} name={member.userName} />;\r\n    });\r\n    return (\r\n        <ul className=\"section-dialogs-inner-members\">\r\n            {mainMembersData}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Members;","import React from 'react';\r\nimport '../../css/Dialogs/SendMessage/SendMessage.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst SendMessageForm = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} name=\"SendMessage\">\r\n            <div className=\"section-dialogs-inner-newmessage\">\r\n                <Field name=\"message\" component=\"textarea\" className=\"section-dialogs-inner-newmessage-input\" id=\"\" rows=\"2\"></Field>\r\n                <button className=\"section-dialogs-inner-newmessage-button\">Send Message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst SendMessageFormRedux = reduxForm({ form: \"SendMessageFormn\" })(SendMessageForm);\r\n\r\n\r\nconst SendMessage = ({ onSubmit }) => {\r\n    return (\r\n        <SendMessageFormRedux onSubmit={onSubmit} />\r\n    );\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport '../../../css/Dialogs/Members/Messages/Message.css';\r\nimport blocker from '../../../../img/default-avatar.png'\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport SendMessage from '../../SendMessage/SendMessage';\r\nimport Preloader from '../../../commons/Preloader/Preloader';\r\nimport { useCallback } from 'react';\r\n\r\nconst Message = ({ id, avatar, instance }) => {\r\n    let [mounted, setMounted] = useState(false);\r\n    let [messagesList, setMessagesList] = useState([]);\r\n    let [isSending, setIsSending] = useState(false);\r\n    let [updated, setUpdated] = useState(false);\r\n\r\n    const fetchData = async () => {\r\n        const response = await instance.get(`/dialogs/${id}/messages`); // first reponse for normal render\r\n        if (response.status === 200) {\r\n            if (mounted === false) {\r\n                setMessagesList(response.data.items);\r\n                setMounted(true);\r\n            } else {\r\n                if (response.data.items.length !== messagesList.length) {\r\n                    setMessagesList(response.data.items);\r\n                    console.log(\"STATE UPDATE\");\r\n                }\r\n                for (let i = 0; i < response.data.items.length; i++) {\r\n                    if (response.data.items[0].id !== messagesList[0].id) { // need effective method\r\n                        setMessagesList(response.data.items);\r\n                        console.log(\"STATE UPDATE\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = useCallback(async ({ message }) => {\r\n        if (isSending) return\r\n        setIsSending(true)\r\n        await instance.post(`/dialogs/${id}/messages`, { body: message });\r\n        fetchData();\r\n        setIsSending(false);\r\n    }, [isSending])\r\n    setTimeout(() => { setUpdated(!updated) }, 10000);\r\n    useEffect(() => {\r\n        if (mounted === false) {\r\n            setMounted(true);\r\n            fetchData();\r\n        }\r\n        return () => {\r\n        };\r\n    }, []);\r\n    useEffect(() => {\r\n        fetchData();\r\n        return () => {\r\n        };\r\n    }, [updated]);\r\n    if (mounted === false) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    let mainMessageData = messagesList.map((item) => {\r\n        return (item.recipientId === id\r\n            ? <div key={item.id} className=\"section-dialogs-inner-active-message col-sm-6 col-sm-offset-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-10 col-centered\">\r\n                        <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                            <p className=\"wrapword\">{item.body}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-2\">\r\n                        <div className=\"section-dialogs-inner-active-message-avatar\">\r\n                            <img className=\"rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            : <div key={item.id} className=\"section-dialogs-inner-active-message col-sm-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-2\">\r\n                        <div className=\"section-dialogs-inner-active-message-avatar\">\r\n                            <img className=\"rounded-circle\" src={avatar ? avatar : blocker} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-10\">\r\n                        <div className=\"section-dialogs-inner-active-message-item center-block\">\r\n                            <p>{item.body}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n    return (\r\n        <div className=\"section-dialogs-inner-active\">\r\n            {mainMessageData}\r\n            <SendMessage onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst Messages = ({ membersList, instance }) => {\r\n    if (membersList === null) {\r\n        return <div className=\"MessagesLoader\"><Preloader isLoading={true} /></div>\r\n    }\r\n    let mainDialogsData = membersList.map((user) => (<Route key={user.id} path={`/home/dialogs/${user.id}`} render={() => <Message instance={instance} key={user.id} avatar={user.photos.small} id={user.id} />} />));\r\n    return (\r\n        <>\r\n            <div className=\"section-dialogs-inner-active\">\r\n                {mainDialogsData}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport '../css/Dialogs//Dialogs.css';\r\nimport Members from './Members/Members';\r\nimport Message from './Members/Messages/Message';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: { \"API-KEY\": \"9832db98-b9d3-460c-9cab-5d06ff193b07\" },\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\"\r\n});\r\n\r\nconst Dialogs = () => {\r\n    let [membersList, setMembersList] = useState([]);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await instance.get(`/dialogs`);\r\n            if (response.status === 200) {\r\n                setMembersList(response.data);\r\n            }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n            setMembersList([]);\r\n        };\r\n    }, [])\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"section-dialogs\">\r\n                <div className=\"section-dialogs-inner\">\r\n                    <div className=\"col-sm-4\">\r\n                        <Members instance={instance} />\r\n                    </div>\r\n                    <Message instance={instance} membersList={membersList} />\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Dialogs;"],"sourceRoot":""}